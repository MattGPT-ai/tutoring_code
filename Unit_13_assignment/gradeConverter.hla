program gradeConverter;
#include ("stdlib.hhf");
static

letterGrade : byte := 0;
_percentage : real32 := 0;

procedure grader(percentage : real32); @nodisplay; @noframe;
static

returnAddress : dword;

begin grader;

pop(returnAddress);
pop(percentage);

push(returnAddress);

finit();
fld(60.0); 
fld(percentage);
fcomp();        
fstsw(AX);      
sahf();         
setb(AL);       
cmp(AL, 1);     
je gradeIsF;
jmp checkForD;

gradeIsF:
mov($46, AL);
jmp exitFunction;

checkForD:
finit();
fld(70.0);
fld(percentage);
fcomp();        
fstsw(AX);      
sahf();         
setb(AL);       
cmp(AL, 1);
je gradeIsD;
jmp checkForC;

gradeIsD:
mov($44, AL);
jmp exitFunction;

checkForC:
finit();
fld(80.0);    
fld(percentage);
fcomp();        
fstsw(AX);      
sahf();         
setb(AL);
cmp(AL, 1); 
je gradeIsC;
jmp checkForB;

gradeIsC:
mov($43, AL);
jmp exitFunction;

checkForB:
finit();
fld(90.0);    
fld(percentage);
fcomp();        
fstsw(AX);      
sahf();         
setb(AL);
cmp(AL, 1);
je gradeIsB;
jmp checkForA;

gradeIsB:
mov($42, AL);
jmp exitFunction;

checkForA:
finit();
fld(100.0);
fld(percentage);
fcomp();
fstsw(AX);
sahf();
setb(AL);
cmp(AL, 1);
je gradeIsA;

gradeIsA:
mov($41, AL);
jmp exitFunction;

jmp exitFunction;
exitFunction:
ret();
end grader;


//Main program
begin gradeConverter;

stdout.put("Feed Me: ");
stdin.get(_percentage);

push(_percentage);

call grader;

stdout.put("that's the grade: ");
stdout.putc(AL);
stdout.newln();

end gradeConverter;